#봄툰 오직 댓글만 수집해보기

# ! pip install openpyxl
# ! pip install requests
# ! pip install pandas
import os #GPU 사용
os.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"]="1"
# GPU 여러개를 지정하고 싶은 경우는 아래 형태로 사용
# os.environ["CUDA_VISIBLE_DEVICES"]="0,1,2"
import requests
import json
from tqdm import tqdm
import pandas as pd
from openpyxl.workbook import Workbook

# 1단계 : 해당 도메인의 툰 정보를 얻기위해선 제일 먼저 요일별 제공하는 툰 고유 id를 알아야한다는 특성이 있어서 id부터 스크랩한다.
weeks = ('MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY','SUNDAY')

db = {"toons_ids":[],
      "reviews_list" : {}
      }

for week in tqdm(weeks,desc='각 요일 돌면서 전체 만화 id 스크랩'):
    url = f'https://www.bomtoon.com/api/balcony-api-v2/contents/tab/schedule/comic?groupMenu={week}&isIncludeTen=false&sort=POPULAR&adultToggle=false'
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
        'X-Balcony-Id': 'BOMTOON_COM',
        'Content-Type': 'application/json'
    }
    resp = requests.request("GET", url, headers=headers)
    jsn = json.loads(resp.text)
    lens = len(jsn['data'])
    for l in range(lens):
        db['toons_ids'].append(jsn['data'][l])
        
# 2 단계 : 툰ids를 기반으로 툰 상세정보를 스크랩한다.
url = f'https://www.bomtoon.com/api/balcony-api-v2/contents/tab/details'
contentsIdsid = db['toons_ids']
contentsIdsid = ','.join(map(str, db['toons_ids']))
# print(contentsIdsid)
payloads = json.dumps({
    "contentsIds": contentsIdsid, #알고싶은 toon id들이 이곳에 들어오면 됨.
    "contentsThumbnailType": "VERTICAL,MAIN,SQUARE"
})

resp = requests.request("POST", url, headers=headers, data=payloads)
jsn = json.loads(resp.text)
lens = len(jsn['data'])
for l in tqdm(range(lens),desc="리뷰 수집 중"): # 실제로 불러와진 툰 정보 갯수만큼 반복 수행.
# for l in tqdm(range(10),desc="리뷰 수집 중"): # 테스트
    title = jsn['data'][l]['title'] # 툰제목 : 댓글 할 예정
    alias = jsn['data'][l]['alias'] # 각 툰 댓글 페이지 들어가려면 툰 alias가 필요
    toon_url= f'https://www.bomtoon.com/api/balcony-api-v2/contents/{alias}?isNotLoginAdult=false&isPorch=false'
    toon_resp = requests.request("GET", toon_url, headers=headers)
    toon_jsn = json.loads(toon_resp.text)
    commentCount = toon_jsn['data']['commentCount'] # 댓글 수집을 하려면 갯수 정보가 있어야 함.
    if commentCount != 0: #댓글이 있는지 확인하고 있으면 수집 없으면 "noreviewstoon."
       reviews_url = f"https://www.bomtoon.com/api/balcony-api/comment/contents/{alias}?isBest=true&page=0"
       review_resp = requests.request('GET', reviews_url ,headers=headers)
       review_jsn = json.loads(review_resp.text)
       review_totalPages = review_jsn['data']['comment']['totalPages'] #리뷰가 몇페이지 인지 저장
       reviews = [] # 실제 각 툰 리뷰들이 담길 리스트.
    #    review_totalPages = 1 #테스트
       for reviewpage in tqdm(range(review_totalPages),desc=f"{title}"): #리뷰 페이지 수 만큼 반복
            if len(reviews) <= reviewpage:
                reviews.append([])
            review_page_url = f'https://www.bomtoon.com/api/balcony-api/comment/contents/{alias}?isBest=true&page={reviewpage}'
            review_page_resp = requests.request('GET', review_page_url ,headers=headers)
            review_page_jsn = json.loads(review_resp.text)
            review_num = len(review_page_jsn['data']['comment']['content'])#각 리뷰 페이지에 있는 리뷰 갯수 확인
            for num in range(int(review_num)):
                review = review_jsn['data']['comment']['content'][num]['comment'] #리뷰
                # print(review) #테스트
                reviews[reviewpage].append(review)
            db['reviews_list'].update([[title, reviews]])
            # print(db['reviews_list'][title]) #테스트
    else : 
        db['reviews_list'].update([[title, 'NoReviewsToon']])
        # print(db['reviews_list'][title]) #테스트

df = pd.DataFrame.from_dict(db['reviews_list'], orient='index').transpose()
df.to_excel('bomtton_tp.xlsx', index=False)

print(df)
